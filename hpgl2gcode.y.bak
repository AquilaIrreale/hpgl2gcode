%{
#include <stdio.h>
#include <stdbool.h>

#define YYSTYPE unsigned
#define U2UM(u) ((u) * 25)
#define U2MM_IP(u) (U2UM(u) / 1000)
#define U2MM_FP(u) (U2UM(u) % 1000)

int yywrap();
void yyerror(const char *s);

void sc(unsigned minx, unsigned maxx, unsigned miny, unsigned maxy);
void pu();
void pd();
void pa(unsigned x, unsigned y);
void aa(unsigned acx, unsigned acy, unsigned theta, bool clockwise);

unsigned feedrate = 600;

unsigned curx = 0;
unsigned cury = 0;

unsigned p1x = 0;
unsigned p1y = 0;
unsigned p2x = 100;
unsigned p2y = 100;
%}
%token NUMBER
%token IN IP SC SP PU PD PA AA
%start list
%%
list: /* nothing */
    | list ';'
    | list command ';'

command: IN
       | SP NUMBER /* ignore */
       | ip
       | sc
       | pa
       | aa
       | pu
       | pd

ip: IP                                         {p1x = 0; p1y = 0; p2x = 100; p2y = 100;}
  | IP NUMBER ',' NUMBER ',' NUMBER ',' NUMBER {p1x = $1; p1y = $3; p2x = $5; p2y = $7;}

sc: SC                                         {sc(0, 100, 0, 100);}
  | SC NUMBER ',' NUMBER ',' NUMBER ',' NUMBER {sc($1, $3, $5, $7);}

pa: PA NUMBER ',' NUMBER     {pa($2, $4);}
  | pa ',' NUMBER ',' NUMBER {pa($3, $5);}

pu: PU {pu();}
  | pu_pa

pu_pa: PU NUMBER ',' NUMBER        {pu(); pa($2, $4);}
     | pu_pa ',' NUMBER ',' NUMBER {pa($3, $5);}

pd: PD {pd();}
  | pd_pa

pd_pa: PD NUMBER ',' NUMBER        {pd(); pa($2, $4);}
     | pd_pa ',' NUMBER ',' NUMBER {pa($3, $5);}

aa: AA NUMBER ',' NUMBER ',' NUMBER                {aa($1, $3, $5, false);}
  | AA NUMBER ',' NUMBER ',' '-' NUMBER            {aa($1, $3, $5, true);}
  | AA NUMBER ',' NUMBER ',' NUMBER ',' NUMBER     {aa($1, $3, $5, false);}
  | AA NUMBER ',' NUMBER ',' '-' NUMBER ',' NUMBER {aa($1, $3, $5, true);}
%%
void sc(unsigned minx, unsigned maxx, unsigned miny, unsigned maxy)
{
    /* unused, for now */
}

void pu()
{
    puts("G1 Z5.0 F1500");
}

void pd()
{
    puts("G1 Z0.0 F1500");
}

void pa(unsigned x, unsigned y)
{
    printf("G1 X%u.%03u Y%u.%03u F%u\n",
           U2MM_IP(x),
           U2MM_FP(x),
           U2MM_IP(y),
           U2MM_FP(y),
           feedrate); 

    curx = x;
    cury = y;
}

void aa(unsigned acx, unsigned acy, unsigned theta, bool clockwise)
{
}

int yywrap() {
    return 1;
}

void yyerror(const char *s)
{
    fprintf(stderr, "%s\n", s);
}

void init()
{
    puts("M104 S0\n"
         "M140 S0\n"
         "G21\n"
         "G90\n"
         "G92\n"
         "M107");
    pu();
}

void finalize()
{
}

int main(int argc, char *argv[])
{
    init();
    yyparse();
    finalize();
}

